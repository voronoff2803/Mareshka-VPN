//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ServerDTO: APIModel {

    public var address: String?

    public var certificateFile: String?

    public var city: String?

    public var country: String?

    public var countryCode: String?

    public var enabled: Bool?

    public var expiredAt: DateTime?

    public var id: ID?

    public var lastUpdate: DateTime?

    public var maxClients: Int?

    public var nowClients: Int?

    public var openVpnProfile: String?

    public init(address: String? = nil, certificateFile: String? = nil, city: String? = nil, country: String? = nil, countryCode: String? = nil, enabled: Bool? = nil, expiredAt: DateTime? = nil, id: ID? = nil, lastUpdate: DateTime? = nil, maxClients: Int? = nil, nowClients: Int? = nil, openVpnProfile: String? = nil) {
        self.address = address
        self.certificateFile = certificateFile
        self.city = city
        self.country = country
        self.countryCode = countryCode
        self.enabled = enabled
        self.expiredAt = expiredAt
        self.id = id
        self.lastUpdate = lastUpdate
        self.maxClients = maxClients
        self.nowClients = nowClients
        self.openVpnProfile = openVpnProfile
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        address = try container.decodeIfPresent("address")
        certificateFile = try container.decodeIfPresent("certificateFile")
        city = try container.decodeIfPresent("city")
        country = try container.decodeIfPresent("country")
        countryCode = try container.decodeIfPresent("countryCode")
        enabled = try container.decodeIfPresent("enabled")
        expiredAt = try container.decodeIfPresent("expiredAt")
        id = try container.decodeIfPresent("id")
        lastUpdate = try container.decodeIfPresent("lastUpdate")
        maxClients = try container.decodeIfPresent("maxClients")
        nowClients = try container.decodeIfPresent("nowClients")
        openVpnProfile = try container.decodeIfPresent("openVpnProfile")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(address, forKey: "address")
        try container.encodeIfPresent(certificateFile, forKey: "certificateFile")
        try container.encodeIfPresent(city, forKey: "city")
        try container.encodeIfPresent(country, forKey: "country")
        try container.encodeIfPresent(countryCode, forKey: "countryCode")
        try container.encodeIfPresent(enabled, forKey: "enabled")
        try container.encodeIfPresent(expiredAt, forKey: "expiredAt")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(lastUpdate, forKey: "lastUpdate")
        try container.encodeIfPresent(maxClients, forKey: "maxClients")
        try container.encodeIfPresent(nowClients, forKey: "nowClients")
        try container.encodeIfPresent(openVpnProfile, forKey: "openVpnProfile")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ServerDTO else { return false }
      guard self.address == object.address else { return false }
      guard self.certificateFile == object.certificateFile else { return false }
      guard self.city == object.city else { return false }
      guard self.country == object.country else { return false }
      guard self.countryCode == object.countryCode else { return false }
      guard self.enabled == object.enabled else { return false }
      guard self.expiredAt == object.expiredAt else { return false }
      guard self.id == object.id else { return false }
      guard self.lastUpdate == object.lastUpdate else { return false }
      guard self.maxClients == object.maxClients else { return false }
      guard self.nowClients == object.nowClients else { return false }
      guard self.openVpnProfile == object.openVpnProfile else { return false }
      return true
    }

    public static func == (lhs: ServerDTO, rhs: ServerDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
