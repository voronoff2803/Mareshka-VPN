//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ReviewDTO: APIModel {

    public enum State: String, Codable, Equatable, CaseIterable {
        case new = "NEW"
        case executed = "EXECUTED"
    }

    public var createdAt: DateTime?

    public var id: ID?

    public var profileFilePath: String?

    public var resultFilePath: String?

    public var state: State?

    public init(createdAt: DateTime? = nil, id: ID? = nil, profileFilePath: String? = nil, resultFilePath: String? = nil, state: State? = nil) {
        self.createdAt = createdAt
        self.id = id
        self.profileFilePath = profileFilePath
        self.resultFilePath = resultFilePath
        self.state = state
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        createdAt = try container.decodeIfPresent("createdAt")
        id = try container.decodeIfPresent("id")
        profileFilePath = try container.decodeIfPresent("profileFilePath")
        resultFilePath = try container.decodeIfPresent("resultFilePath")
        state = try container.decodeIfPresent("state")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(createdAt, forKey: "createdAt")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(profileFilePath, forKey: "profileFilePath")
        try container.encodeIfPresent(resultFilePath, forKey: "resultFilePath")
        try container.encodeIfPresent(state, forKey: "state")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ReviewDTO else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.id == object.id else { return false }
      guard self.profileFilePath == object.profileFilePath else { return false }
      guard self.resultFilePath == object.resultFilePath else { return false }
      guard self.state == object.state else { return false }
      return true
    }

    public static func == (lhs: ReviewDTO, rhs: ReviewDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
