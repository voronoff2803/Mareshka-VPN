//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class RedirectView: APIModel {

    public enum StatusCode: String, Codable, Equatable, CaseIterable {
        case _100Continue = "100 CONTINUE"
        case _101SwitchingProtocols = "101 SWITCHING_PROTOCOLS"
        case _102Processing = "102 PROCESSING"
        case _103Checkpoint = "103 CHECKPOINT"
        case _200Ok = "200 OK"
        case _201Created = "201 CREATED"
        case _202Accepted = "202 ACCEPTED"
        case _203NonAuthoritativeInformation = "203 NON_AUTHORITATIVE_INFORMATION"
        case _204NoContent = "204 NO_CONTENT"
        case _205ResetContent = "205 RESET_CONTENT"
        case _206PartialContent = "206 PARTIAL_CONTENT"
        case _207MultiStatus = "207 MULTI_STATUS"
        case _208AlreadyReported = "208 ALREADY_REPORTED"
        case _226ImUsed = "226 IM_USED"
        case _300MultipleChoices = "300 MULTIPLE_CHOICES"
        case _301MovedPermanently = "301 MOVED_PERMANENTLY"
        case _302Found = "302 FOUND"
        case _302MovedTemporarily = "302 MOVED_TEMPORARILY"
        case _303SeeOther = "303 SEE_OTHER"
        case _304NotModified = "304 NOT_MODIFIED"
        case _305UseProxy = "305 USE_PROXY"
        case _307TemporaryRedirect = "307 TEMPORARY_REDIRECT"
        case _308PermanentRedirect = "308 PERMANENT_REDIRECT"
        case _400BadRequest = "400 BAD_REQUEST"
        case _401Unauthorized = "401 UNAUTHORIZED"
        case _402PaymentRequired = "402 PAYMENT_REQUIRED"
        case _403Forbidden = "403 FORBIDDEN"
        case _404NotFound = "404 NOT_FOUND"
        case _405MethodNotAllowed = "405 METHOD_NOT_ALLOWED"
        case _406NotAcceptable = "406 NOT_ACCEPTABLE"
        case _407ProxyAuthenticationRequired = "407 PROXY_AUTHENTICATION_REQUIRED"
        case _408RequestTimeout = "408 REQUEST_TIMEOUT"
        case _409Conflict = "409 CONFLICT"
        case _410Gone = "410 GONE"
        case _411LengthRequired = "411 LENGTH_REQUIRED"
        case _412PreconditionFailed = "412 PRECONDITION_FAILED"
        case _413PayloadTooLarge = "413 PAYLOAD_TOO_LARGE"
        case _413RequestEntityTooLarge = "413 REQUEST_ENTITY_TOO_LARGE"
        case _414UriTooLong = "414 URI_TOO_LONG"
        case _414RequestUriTooLong = "414 REQUEST_URI_TOO_LONG"
        case _415UnsupportedMediaType = "415 UNSUPPORTED_MEDIA_TYPE"
        case _416RequestedRangeNotSatisfiable = "416 REQUESTED_RANGE_NOT_SATISFIABLE"
        case _417ExpectationFailed = "417 EXPECTATION_FAILED"
        case _418IAmaTeapot = "418 I_AM_A_TEAPOT"
        case _419InsufficientSpaceOnResource = "419 INSUFFICIENT_SPACE_ON_RESOURCE"
        case _420MethodFailure = "420 METHOD_FAILURE"
        case _421DestinationLocked = "421 DESTINATION_LOCKED"
        case _422UnprocessableEntity = "422 UNPROCESSABLE_ENTITY"
        case _423Locked = "423 LOCKED"
        case _424FailedDependency = "424 FAILED_DEPENDENCY"
        case _425TooEarly = "425 TOO_EARLY"
        case _426UpgradeRequired = "426 UPGRADE_REQUIRED"
        case _428PreconditionRequired = "428 PRECONDITION_REQUIRED"
        case _429TooManyRequests = "429 TOO_MANY_REQUESTS"
        case _431RequestHeaderFieldsTooLarge = "431 REQUEST_HEADER_FIELDS_TOO_LARGE"
        case _451UnavailableForLegalReasons = "451 UNAVAILABLE_FOR_LEGAL_REASONS"
        case _500InternalServerError = "500 INTERNAL_SERVER_ERROR"
        case _501NotImplemented = "501 NOT_IMPLEMENTED"
        case _502BadGateway = "502 BAD_GATEWAY"
        case _503ServiceUnavailable = "503 SERVICE_UNAVAILABLE"
        case _504GatewayTimeout = "504 GATEWAY_TIMEOUT"
        case _505HttpVersionNotSupported = "505 HTTP_VERSION_NOT_SUPPORTED"
        case _506VariantAlsoNegotiates = "506 VARIANT_ALSO_NEGOTIATES"
        case _507InsufficientStorage = "507 INSUFFICIENT_STORAGE"
        case _508LoopDetected = "508 LOOP_DETECTED"
        case _509BandwidthLimitExceeded = "509 BANDWIDTH_LIMIT_EXCEEDED"
        case _510NotExtended = "510 NOT_EXTENDED"
        case _511NetworkAuthenticationRequired = "511 NETWORK_AUTHENTICATION_REQUIRED"
    }

    public var applicationContext: ApplicationContext?

    public var attributes: [String: String]?

    public var attributesCSV: String?

    public var attributesMap: [String: [String: Any]]?

    public var beanName: String?

    public var contentType: String?

    public var contextRelative: Bool?

    public var encodingScheme: String?

    public var expandUriTemplateVariables: Bool?

    public var exposeContextBeansAsAttributes: Bool?

    public var exposeModelAttributes: Bool?

    public var exposePathVariables: Bool?

    public var exposedContextBeanNames: [String]?

    public var hosts: [String]?

    public var http10Compatible: Bool?

    public var propagateQueryParams: Bool?

    public var propagateQueryProperties: Bool?

    public var redirectView: Bool?

    public var requestContextAttribute: String?

    public var servletContext: ServletContext?

    public var staticAttributes: [String: [String: Any]]?

    public var statusCode: StatusCode?

    public var url: String?

    public class ServletContext: APIModel {

        public enum DefaultSessionTrackingModes: String, Codable, Equatable, CaseIterable {
            case cookie = "COOKIE"
            case url = "URL"
            case ssl = "SSL"
        }

        public enum EffectiveSessionTrackingModes: String, Codable, Equatable, CaseIterable {
            case cookie = "COOKIE"
            case url = "URL"
            case ssl = "SSL"
        }

        public enum SessionTrackingModes: String, Codable, Equatable, CaseIterable {
            case cookie = "COOKIE"
            case url = "URL"
            case ssl = "SSL"
        }

        public var attributeNames: [String: Any]?

        public var classLoader: ClassLoader?

        public var contextPath: String?

        public var defaultSessionTrackingModes: [DefaultSessionTrackingModes]?

        public var effectiveMajorVersion: Int?

        public var effectiveMinorVersion: Int?

        public var effectiveSessionTrackingModes: [EffectiveSessionTrackingModes]?

        public var filterRegistrations: [String: FilterRegistrations]?

        public var initParameterNames: [String: Any]?

        public var jspConfigDescriptor: JspConfigDescriptor?

        public var majorVersion: Int?

        public var minorVersion: Int?

        public var requestCharacterEncoding: String?

        public var responseCharacterEncoding: String?

        public var serverInfo: String?

        public var servletContextName: String?

        public var servletNames: [String: Any]?

        public var servletRegistrations: [String: ServletRegistrations]?

        public var servlets: [String: Any]?

        public var sessionCookieConfig: SessionCookieConfig?

        public var sessionTimeout: Int?

        public var sessionTrackingModes: [SessionTrackingModes]?

        public var virtualServerName: String?

        public class ClassLoader: APIModel {

            public var defaultAssertionStatus: Bool?

            public var definedPackages: [DefinedPackages]?

            public var name: String?

            public var registeredAsParallelCapable: Bool?

            public class DefinedPackages: APIModel {

                public var annotations: [[String: Any]]?

                public var declaredAnnotations: [[String: Any]]?

                public var implementationTitle: String?

                public var implementationVendor: String?

                public var implementationVersion: String?

                public var name: String?

                public var sealed: Bool?

                public var specificationTitle: String?

                public var specificationVendor: String?

                public var specificationVersion: String?

                public init(annotations: [[String: Any]]? = nil, declaredAnnotations: [[String: Any]]? = nil, implementationTitle: String? = nil, implementationVendor: String? = nil, implementationVersion: String? = nil, name: String? = nil, sealed: Bool? = nil, specificationTitle: String? = nil, specificationVendor: String? = nil, specificationVersion: String? = nil) {
                    self.annotations = annotations
                    self.declaredAnnotations = declaredAnnotations
                    self.implementationTitle = implementationTitle
                    self.implementationVendor = implementationVendor
                    self.implementationVersion = implementationVersion
                    self.name = name
                    self.sealed = sealed
                    self.specificationTitle = specificationTitle
                    self.specificationVendor = specificationVendor
                    self.specificationVersion = specificationVersion
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    annotations = try container.decodeAnyIfPresent("annotations")
                    declaredAnnotations = try container.decodeAnyIfPresent("declaredAnnotations")
                    implementationTitle = try container.decodeIfPresent("implementationTitle")
                    implementationVendor = try container.decodeIfPresent("implementationVendor")
                    implementationVersion = try container.decodeIfPresent("implementationVersion")
                    name = try container.decodeIfPresent("name")
                    sealed = try container.decodeIfPresent("sealed")
                    specificationTitle = try container.decodeIfPresent("specificationTitle")
                    specificationVendor = try container.decodeIfPresent("specificationVendor")
                    specificationVersion = try container.decodeIfPresent("specificationVersion")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeAnyIfPresent(annotations, forKey: "annotations")
                    try container.encodeAnyIfPresent(declaredAnnotations, forKey: "declaredAnnotations")
                    try container.encodeIfPresent(implementationTitle, forKey: "implementationTitle")
                    try container.encodeIfPresent(implementationVendor, forKey: "implementationVendor")
                    try container.encodeIfPresent(implementationVersion, forKey: "implementationVersion")
                    try container.encodeIfPresent(name, forKey: "name")
                    try container.encodeIfPresent(sealed, forKey: "sealed")
                    try container.encodeIfPresent(specificationTitle, forKey: "specificationTitle")
                    try container.encodeIfPresent(specificationVendor, forKey: "specificationVendor")
                    try container.encodeIfPresent(specificationVersion, forKey: "specificationVersion")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? DefinedPackages else { return false }
                  guard self.annotations == object.annotations else { return false }
                  guard self.declaredAnnotations == object.declaredAnnotations else { return false }
                  guard self.implementationTitle == object.implementationTitle else { return false }
                  guard self.implementationVendor == object.implementationVendor else { return false }
                  guard self.implementationVersion == object.implementationVersion else { return false }
                  guard self.name == object.name else { return false }
                  guard self.sealed == object.sealed else { return false }
                  guard self.specificationTitle == object.specificationTitle else { return false }
                  guard self.specificationVendor == object.specificationVendor else { return false }
                  guard self.specificationVersion == object.specificationVersion else { return false }
                  return true
                }

                public static func == (lhs: DefinedPackages, rhs: DefinedPackages) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public init(defaultAssertionStatus: Bool? = nil, definedPackages: [DefinedPackages]? = nil, name: String? = nil, registeredAsParallelCapable: Bool? = nil) {
                self.defaultAssertionStatus = defaultAssertionStatus
                self.definedPackages = definedPackages
                self.name = name
                self.registeredAsParallelCapable = registeredAsParallelCapable
            }

            public required init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                defaultAssertionStatus = try container.decodeIfPresent("defaultAssertionStatus")
                definedPackages = try container.decodeArrayIfPresent("definedPackages")
                name = try container.decodeIfPresent("name")
                registeredAsParallelCapable = try container.decodeIfPresent("registeredAsParallelCapable")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encodeIfPresent(defaultAssertionStatus, forKey: "defaultAssertionStatus")
                try container.encodeIfPresent(definedPackages, forKey: "definedPackages")
                try container.encodeIfPresent(name, forKey: "name")
                try container.encodeIfPresent(registeredAsParallelCapable, forKey: "registeredAsParallelCapable")
            }

            public func isEqual(to object: Any?) -> Bool {
              guard let object = object as? ClassLoader else { return false }
              guard self.defaultAssertionStatus == object.defaultAssertionStatus else { return false }
              guard self.definedPackages == object.definedPackages else { return false }
              guard self.name == object.name else { return false }
              guard self.registeredAsParallelCapable == object.registeredAsParallelCapable else { return false }
              return true
            }

            public static func == (lhs: ClassLoader, rhs: ClassLoader) -> Bool {
                return lhs.isEqual(to: rhs)
            }
        }

        public class JspConfigDescriptor: APIModel {

            public var jspPropertyGroups: [JspPropertyGroups]?

            public var taglibs: [Taglibs]?

            public class JspPropertyGroups: APIModel {

                public var buffer: String?

                public var defaultContentType: String?

                public var deferredSyntaxAllowedAsLiteral: String?

                public var elIgnored: String?

                public var errorOnUndeclaredNamespace: String?

                public var includeCodas: [String]?

                public var includePreludes: [String]?

                public var isXml: String?

                public var pageEncoding: String?

                public var scriptingInvalid: String?

                public var trimDirectiveWhitespaces: String?

                public var urlPatterns: [String]?

                public init(buffer: String? = nil, defaultContentType: String? = nil, deferredSyntaxAllowedAsLiteral: String? = nil, elIgnored: String? = nil, errorOnUndeclaredNamespace: String? = nil, includeCodas: [String]? = nil, includePreludes: [String]? = nil, isXml: String? = nil, pageEncoding: String? = nil, scriptingInvalid: String? = nil, trimDirectiveWhitespaces: String? = nil, urlPatterns: [String]? = nil) {
                    self.buffer = buffer
                    self.defaultContentType = defaultContentType
                    self.deferredSyntaxAllowedAsLiteral = deferredSyntaxAllowedAsLiteral
                    self.elIgnored = elIgnored
                    self.errorOnUndeclaredNamespace = errorOnUndeclaredNamespace
                    self.includeCodas = includeCodas
                    self.includePreludes = includePreludes
                    self.isXml = isXml
                    self.pageEncoding = pageEncoding
                    self.scriptingInvalid = scriptingInvalid
                    self.trimDirectiveWhitespaces = trimDirectiveWhitespaces
                    self.urlPatterns = urlPatterns
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    buffer = try container.decodeIfPresent("buffer")
                    defaultContentType = try container.decodeIfPresent("defaultContentType")
                    deferredSyntaxAllowedAsLiteral = try container.decodeIfPresent("deferredSyntaxAllowedAsLiteral")
                    elIgnored = try container.decodeIfPresent("elIgnored")
                    errorOnUndeclaredNamespace = try container.decodeIfPresent("errorOnUndeclaredNamespace")
                    includeCodas = try container.decodeArrayIfPresent("includeCodas")
                    includePreludes = try container.decodeArrayIfPresent("includePreludes")
                    isXml = try container.decodeIfPresent("isXml")
                    pageEncoding = try container.decodeIfPresent("pageEncoding")
                    scriptingInvalid = try container.decodeIfPresent("scriptingInvalid")
                    trimDirectiveWhitespaces = try container.decodeIfPresent("trimDirectiveWhitespaces")
                    urlPatterns = try container.decodeArrayIfPresent("urlPatterns")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(buffer, forKey: "buffer")
                    try container.encodeIfPresent(defaultContentType, forKey: "defaultContentType")
                    try container.encodeIfPresent(deferredSyntaxAllowedAsLiteral, forKey: "deferredSyntaxAllowedAsLiteral")
                    try container.encodeIfPresent(elIgnored, forKey: "elIgnored")
                    try container.encodeIfPresent(errorOnUndeclaredNamespace, forKey: "errorOnUndeclaredNamespace")
                    try container.encodeIfPresent(includeCodas, forKey: "includeCodas")
                    try container.encodeIfPresent(includePreludes, forKey: "includePreludes")
                    try container.encodeIfPresent(isXml, forKey: "isXml")
                    try container.encodeIfPresent(pageEncoding, forKey: "pageEncoding")
                    try container.encodeIfPresent(scriptingInvalid, forKey: "scriptingInvalid")
                    try container.encodeIfPresent(trimDirectiveWhitespaces, forKey: "trimDirectiveWhitespaces")
                    try container.encodeIfPresent(urlPatterns, forKey: "urlPatterns")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? JspPropertyGroups else { return false }
                  guard self.buffer == object.buffer else { return false }
                  guard self.defaultContentType == object.defaultContentType else { return false }
                  guard self.deferredSyntaxAllowedAsLiteral == object.deferredSyntaxAllowedAsLiteral else { return false }
                  guard self.elIgnored == object.elIgnored else { return false }
                  guard self.errorOnUndeclaredNamespace == object.errorOnUndeclaredNamespace else { return false }
                  guard self.includeCodas == object.includeCodas else { return false }
                  guard self.includePreludes == object.includePreludes else { return false }
                  guard self.isXml == object.isXml else { return false }
                  guard self.pageEncoding == object.pageEncoding else { return false }
                  guard self.scriptingInvalid == object.scriptingInvalid else { return false }
                  guard self.trimDirectiveWhitespaces == object.trimDirectiveWhitespaces else { return false }
                  guard self.urlPatterns == object.urlPatterns else { return false }
                  return true
                }

                public static func == (lhs: JspPropertyGroups, rhs: JspPropertyGroups) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public class Taglibs: APIModel {

                public var taglibLocation: String?

                public var taglibURI: String?

                public init(taglibLocation: String? = nil, taglibURI: String? = nil) {
                    self.taglibLocation = taglibLocation
                    self.taglibURI = taglibURI
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    taglibLocation = try container.decodeIfPresent("taglibLocation")
                    taglibURI = try container.decodeIfPresent("taglibURI")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(taglibLocation, forKey: "taglibLocation")
                    try container.encodeIfPresent(taglibURI, forKey: "taglibURI")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Taglibs else { return false }
                  guard self.taglibLocation == object.taglibLocation else { return false }
                  guard self.taglibURI == object.taglibURI else { return false }
                  return true
                }

                public static func == (lhs: Taglibs, rhs: Taglibs) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public init(jspPropertyGroups: [JspPropertyGroups]? = nil, taglibs: [Taglibs]? = nil) {
                self.jspPropertyGroups = jspPropertyGroups
                self.taglibs = taglibs
            }

            public required init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                jspPropertyGroups = try container.decodeArrayIfPresent("jspPropertyGroups")
                taglibs = try container.decodeArrayIfPresent("taglibs")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encodeIfPresent(jspPropertyGroups, forKey: "jspPropertyGroups")
                try container.encodeIfPresent(taglibs, forKey: "taglibs")
            }

            public func isEqual(to object: Any?) -> Bool {
              guard let object = object as? JspConfigDescriptor else { return false }
              guard self.jspPropertyGroups == object.jspPropertyGroups else { return false }
              guard self.taglibs == object.taglibs else { return false }
              return true
            }

            public static func == (lhs: JspConfigDescriptor, rhs: JspConfigDescriptor) -> Bool {
                return lhs.isEqual(to: rhs)
            }
        }

        public class SessionCookieConfig: APIModel {

            public var comment: String?

            public var domain: String?

            public var httpOnly: Bool?

            public var maxAge: Int?

            public var name: String?

            public var path: String?

            public var secure: Bool?

            public init(comment: String? = nil, domain: String? = nil, httpOnly: Bool? = nil, maxAge: Int? = nil, name: String? = nil, path: String? = nil, secure: Bool? = nil) {
                self.comment = comment
                self.domain = domain
                self.httpOnly = httpOnly
                self.maxAge = maxAge
                self.name = name
                self.path = path
                self.secure = secure
            }

            public required init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                comment = try container.decodeIfPresent("comment")
                domain = try container.decodeIfPresent("domain")
                httpOnly = try container.decodeIfPresent("httpOnly")
                maxAge = try container.decodeIfPresent("maxAge")
                name = try container.decodeIfPresent("name")
                path = try container.decodeIfPresent("path")
                secure = try container.decodeIfPresent("secure")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encodeIfPresent(comment, forKey: "comment")
                try container.encodeIfPresent(domain, forKey: "domain")
                try container.encodeIfPresent(httpOnly, forKey: "httpOnly")
                try container.encodeIfPresent(maxAge, forKey: "maxAge")
                try container.encodeIfPresent(name, forKey: "name")
                try container.encodeIfPresent(path, forKey: "path")
                try container.encodeIfPresent(secure, forKey: "secure")
            }

            public func isEqual(to object: Any?) -> Bool {
              guard let object = object as? SessionCookieConfig else { return false }
              guard self.comment == object.comment else { return false }
              guard self.domain == object.domain else { return false }
              guard self.httpOnly == object.httpOnly else { return false }
              guard self.maxAge == object.maxAge else { return false }
              guard self.name == object.name else { return false }
              guard self.path == object.path else { return false }
              guard self.secure == object.secure else { return false }
              return true
            }

            public static func == (lhs: SessionCookieConfig, rhs: SessionCookieConfig) -> Bool {
                return lhs.isEqual(to: rhs)
            }
        }

        public init(attributeNames: [String: Any]? = nil, classLoader: ClassLoader? = nil, contextPath: String? = nil, defaultSessionTrackingModes: [DefaultSessionTrackingModes]? = nil, effectiveMajorVersion: Int? = nil, effectiveMinorVersion: Int? = nil, effectiveSessionTrackingModes: [EffectiveSessionTrackingModes]? = nil, filterRegistrations: [String: FilterRegistrations]? = nil, initParameterNames: [String: Any]? = nil, jspConfigDescriptor: JspConfigDescriptor? = nil, majorVersion: Int? = nil, minorVersion: Int? = nil, requestCharacterEncoding: String? = nil, responseCharacterEncoding: String? = nil, serverInfo: String? = nil, servletContextName: String? = nil, servletNames: [String: Any]? = nil, servletRegistrations: [String: ServletRegistrations]? = nil, servlets: [String: Any]? = nil, sessionCookieConfig: SessionCookieConfig? = nil, sessionTimeout: Int? = nil, sessionTrackingModes: [SessionTrackingModes]? = nil, virtualServerName: String? = nil) {
            self.attributeNames = attributeNames
            self.classLoader = classLoader
            self.contextPath = contextPath
            self.defaultSessionTrackingModes = defaultSessionTrackingModes
            self.effectiveMajorVersion = effectiveMajorVersion
            self.effectiveMinorVersion = effectiveMinorVersion
            self.effectiveSessionTrackingModes = effectiveSessionTrackingModes
            self.filterRegistrations = filterRegistrations
            self.initParameterNames = initParameterNames
            self.jspConfigDescriptor = jspConfigDescriptor
            self.majorVersion = majorVersion
            self.minorVersion = minorVersion
            self.requestCharacterEncoding = requestCharacterEncoding
            self.responseCharacterEncoding = responseCharacterEncoding
            self.serverInfo = serverInfo
            self.servletContextName = servletContextName
            self.servletNames = servletNames
            self.servletRegistrations = servletRegistrations
            self.servlets = servlets
            self.sessionCookieConfig = sessionCookieConfig
            self.sessionTimeout = sessionTimeout
            self.sessionTrackingModes = sessionTrackingModes
            self.virtualServerName = virtualServerName
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            attributeNames = try container.decodeAnyIfPresent("attributeNames")
            classLoader = try container.decodeIfPresent("classLoader")
            contextPath = try container.decodeIfPresent("contextPath")
            defaultSessionTrackingModes = try container.decodeArrayIfPresent("defaultSessionTrackingModes")
            effectiveMajorVersion = try container.decodeIfPresent("effectiveMajorVersion")
            effectiveMinorVersion = try container.decodeIfPresent("effectiveMinorVersion")
            effectiveSessionTrackingModes = try container.decodeArrayIfPresent("effectiveSessionTrackingModes")
            filterRegistrations = try container.decodeIfPresent("filterRegistrations")
            initParameterNames = try container.decodeAnyIfPresent("initParameterNames")
            jspConfigDescriptor = try container.decodeIfPresent("jspConfigDescriptor")
            majorVersion = try container.decodeIfPresent("majorVersion")
            minorVersion = try container.decodeIfPresent("minorVersion")
            requestCharacterEncoding = try container.decodeIfPresent("requestCharacterEncoding")
            responseCharacterEncoding = try container.decodeIfPresent("responseCharacterEncoding")
            serverInfo = try container.decodeIfPresent("serverInfo")
            servletContextName = try container.decodeIfPresent("servletContextName")
            servletNames = try container.decodeAnyIfPresent("servletNames")
            servletRegistrations = try container.decodeIfPresent("servletRegistrations")
            servlets = try container.decodeAnyIfPresent("servlets")
            sessionCookieConfig = try container.decodeIfPresent("sessionCookieConfig")
            sessionTimeout = try container.decodeIfPresent("sessionTimeout")
            sessionTrackingModes = try container.decodeArrayIfPresent("sessionTrackingModes")
            virtualServerName = try container.decodeIfPresent("virtualServerName")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeAnyIfPresent(attributeNames, forKey: "attributeNames")
            try container.encodeIfPresent(classLoader, forKey: "classLoader")
            try container.encodeIfPresent(contextPath, forKey: "contextPath")
            try container.encodeIfPresent(defaultSessionTrackingModes, forKey: "defaultSessionTrackingModes")
            try container.encodeIfPresent(effectiveMajorVersion, forKey: "effectiveMajorVersion")
            try container.encodeIfPresent(effectiveMinorVersion, forKey: "effectiveMinorVersion")
            try container.encodeIfPresent(effectiveSessionTrackingModes, forKey: "effectiveSessionTrackingModes")
            try container.encodeIfPresent(filterRegistrations, forKey: "filterRegistrations")
            try container.encodeAnyIfPresent(initParameterNames, forKey: "initParameterNames")
            try container.encodeIfPresent(jspConfigDescriptor, forKey: "jspConfigDescriptor")
            try container.encodeIfPresent(majorVersion, forKey: "majorVersion")
            try container.encodeIfPresent(minorVersion, forKey: "minorVersion")
            try container.encodeIfPresent(requestCharacterEncoding, forKey: "requestCharacterEncoding")
            try container.encodeIfPresent(responseCharacterEncoding, forKey: "responseCharacterEncoding")
            try container.encodeIfPresent(serverInfo, forKey: "serverInfo")
            try container.encodeIfPresent(servletContextName, forKey: "servletContextName")
            try container.encodeAnyIfPresent(servletNames, forKey: "servletNames")
            try container.encodeIfPresent(servletRegistrations, forKey: "servletRegistrations")
            try container.encodeAnyIfPresent(servlets, forKey: "servlets")
            try container.encodeIfPresent(sessionCookieConfig, forKey: "sessionCookieConfig")
            try container.encodeIfPresent(sessionTimeout, forKey: "sessionTimeout")
            try container.encodeIfPresent(sessionTrackingModes, forKey: "sessionTrackingModes")
            try container.encodeIfPresent(virtualServerName, forKey: "virtualServerName")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? ServletContext else { return false }
          guard NSDictionary(dictionary: self.attributeNames ?? [:]).isEqual(to: object.attributeNames ?? [:]) else { return false }
          guard self.classLoader == object.classLoader else { return false }
          guard self.contextPath == object.contextPath else { return false }
          guard self.defaultSessionTrackingModes == object.defaultSessionTrackingModes else { return false }
          guard self.effectiveMajorVersion == object.effectiveMajorVersion else { return false }
          guard self.effectiveMinorVersion == object.effectiveMinorVersion else { return false }
          guard self.effectiveSessionTrackingModes == object.effectiveSessionTrackingModes else { return false }
          guard self.filterRegistrations == object.filterRegistrations else { return false }
          guard NSDictionary(dictionary: self.initParameterNames ?? [:]).isEqual(to: object.initParameterNames ?? [:]) else { return false }
          guard self.jspConfigDescriptor == object.jspConfigDescriptor else { return false }
          guard self.majorVersion == object.majorVersion else { return false }
          guard self.minorVersion == object.minorVersion else { return false }
          guard self.requestCharacterEncoding == object.requestCharacterEncoding else { return false }
          guard self.responseCharacterEncoding == object.responseCharacterEncoding else { return false }
          guard self.serverInfo == object.serverInfo else { return false }
          guard self.servletContextName == object.servletContextName else { return false }
          guard NSDictionary(dictionary: self.servletNames ?? [:]).isEqual(to: object.servletNames ?? [:]) else { return false }
          guard self.servletRegistrations == object.servletRegistrations else { return false }
          guard NSDictionary(dictionary: self.servlets ?? [:]).isEqual(to: object.servlets ?? [:]) else { return false }
          guard self.sessionCookieConfig == object.sessionCookieConfig else { return false }
          guard self.sessionTimeout == object.sessionTimeout else { return false }
          guard self.sessionTrackingModes == object.sessionTrackingModes else { return false }
          guard self.virtualServerName == object.virtualServerName else { return false }
          return true
        }

        public static func == (lhs: ServletContext, rhs: ServletContext) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(applicationContext: ApplicationContext? = nil, attributes: [String: String]? = nil, attributesCSV: String? = nil, attributesMap: [String: [String: Any]]? = nil, beanName: String? = nil, contentType: String? = nil, contextRelative: Bool? = nil, encodingScheme: String? = nil, expandUriTemplateVariables: Bool? = nil, exposeContextBeansAsAttributes: Bool? = nil, exposeModelAttributes: Bool? = nil, exposePathVariables: Bool? = nil, exposedContextBeanNames: [String]? = nil, hosts: [String]? = nil, http10Compatible: Bool? = nil, propagateQueryParams: Bool? = nil, propagateQueryProperties: Bool? = nil, redirectView: Bool? = nil, requestContextAttribute: String? = nil, servletContext: ServletContext? = nil, staticAttributes: [String: [String: Any]]? = nil, statusCode: StatusCode? = nil, url: String? = nil) {
        self.applicationContext = applicationContext
        self.attributes = attributes
        self.attributesCSV = attributesCSV
        self.attributesMap = attributesMap
        self.beanName = beanName
        self.contentType = contentType
        self.contextRelative = contextRelative
        self.encodingScheme = encodingScheme
        self.expandUriTemplateVariables = expandUriTemplateVariables
        self.exposeContextBeansAsAttributes = exposeContextBeansAsAttributes
        self.exposeModelAttributes = exposeModelAttributes
        self.exposePathVariables = exposePathVariables
        self.exposedContextBeanNames = exposedContextBeanNames
        self.hosts = hosts
        self.http10Compatible = http10Compatible
        self.propagateQueryParams = propagateQueryParams
        self.propagateQueryProperties = propagateQueryProperties
        self.redirectView = redirectView
        self.requestContextAttribute = requestContextAttribute
        self.servletContext = servletContext
        self.staticAttributes = staticAttributes
        self.statusCode = statusCode
        self.url = url
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        applicationContext = try container.decodeIfPresent("applicationContext")
        attributes = try container.decodeIfPresent("attributes")
        attributesCSV = try container.decodeIfPresent("attributesCSV")
        attributesMap = try container.decodeAnyIfPresent("attributesMap")
        beanName = try container.decodeIfPresent("beanName")
        contentType = try container.decodeIfPresent("contentType")
        contextRelative = try container.decodeIfPresent("contextRelative")
        encodingScheme = try container.decodeIfPresent("encodingScheme")
        expandUriTemplateVariables = try container.decodeIfPresent("expandUriTemplateVariables")
        exposeContextBeansAsAttributes = try container.decodeIfPresent("exposeContextBeansAsAttributes")
        exposeModelAttributes = try container.decodeIfPresent("exposeModelAttributes")
        exposePathVariables = try container.decodeIfPresent("exposePathVariables")
        exposedContextBeanNames = try container.decodeArrayIfPresent("exposedContextBeanNames")
        hosts = try container.decodeArrayIfPresent("hosts")
        http10Compatible = try container.decodeIfPresent("http10Compatible")
        propagateQueryParams = try container.decodeIfPresent("propagateQueryParams")
        propagateQueryProperties = try container.decodeIfPresent("propagateQueryProperties")
        redirectView = try container.decodeIfPresent("redirectView")
        requestContextAttribute = try container.decodeIfPresent("requestContextAttribute")
        servletContext = try container.decodeIfPresent("servletContext")
        staticAttributes = try container.decodeAnyIfPresent("staticAttributes")
        statusCode = try container.decodeIfPresent("statusCode")
        url = try container.decodeIfPresent("url")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(applicationContext, forKey: "applicationContext")
        try container.encodeIfPresent(attributes, forKey: "attributes")
        try container.encodeIfPresent(attributesCSV, forKey: "attributesCSV")
        try container.encodeAnyIfPresent(attributesMap, forKey: "attributesMap")
        try container.encodeIfPresent(beanName, forKey: "beanName")
        try container.encodeIfPresent(contentType, forKey: "contentType")
        try container.encodeIfPresent(contextRelative, forKey: "contextRelative")
        try container.encodeIfPresent(encodingScheme, forKey: "encodingScheme")
        try container.encodeIfPresent(expandUriTemplateVariables, forKey: "expandUriTemplateVariables")
        try container.encodeIfPresent(exposeContextBeansAsAttributes, forKey: "exposeContextBeansAsAttributes")
        try container.encodeIfPresent(exposeModelAttributes, forKey: "exposeModelAttributes")
        try container.encodeIfPresent(exposePathVariables, forKey: "exposePathVariables")
        try container.encodeIfPresent(exposedContextBeanNames, forKey: "exposedContextBeanNames")
        try container.encodeIfPresent(hosts, forKey: "hosts")
        try container.encodeIfPresent(http10Compatible, forKey: "http10Compatible")
        try container.encodeIfPresent(propagateQueryParams, forKey: "propagateQueryParams")
        try container.encodeIfPresent(propagateQueryProperties, forKey: "propagateQueryProperties")
        try container.encodeIfPresent(redirectView, forKey: "redirectView")
        try container.encodeIfPresent(requestContextAttribute, forKey: "requestContextAttribute")
        try container.encodeIfPresent(servletContext, forKey: "servletContext")
        try container.encodeAnyIfPresent(staticAttributes, forKey: "staticAttributes")
        try container.encodeIfPresent(statusCode, forKey: "statusCode")
        try container.encodeIfPresent(url, forKey: "url")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? RedirectView else { return false }
      guard self.applicationContext == object.applicationContext else { return false }
      guard self.attributes == object.attributes else { return false }
      guard self.attributesCSV == object.attributesCSV else { return false }
      guard self.attributesMap == object.attributesMap else { return false }
      guard self.beanName == object.beanName else { return false }
      guard self.contentType == object.contentType else { return false }
      guard self.contextRelative == object.contextRelative else { return false }
      guard self.encodingScheme == object.encodingScheme else { return false }
      guard self.expandUriTemplateVariables == object.expandUriTemplateVariables else { return false }
      guard self.exposeContextBeansAsAttributes == object.exposeContextBeansAsAttributes else { return false }
      guard self.exposeModelAttributes == object.exposeModelAttributes else { return false }
      guard self.exposePathVariables == object.exposePathVariables else { return false }
      guard self.exposedContextBeanNames == object.exposedContextBeanNames else { return false }
      guard self.hosts == object.hosts else { return false }
      guard self.http10Compatible == object.http10Compatible else { return false }
      guard self.propagateQueryParams == object.propagateQueryParams else { return false }
      guard self.propagateQueryProperties == object.propagateQueryProperties else { return false }
      guard self.redirectView == object.redirectView else { return false }
      guard self.requestContextAttribute == object.requestContextAttribute else { return false }
      guard self.servletContext == object.servletContext else { return false }
      guard self.staticAttributes == object.staticAttributes else { return false }
      guard self.statusCode == object.statusCode else { return false }
      guard self.url == object.url else { return false }
      return true
    }

    public static func == (lhs: RedirectView, rhs: RedirectView) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
