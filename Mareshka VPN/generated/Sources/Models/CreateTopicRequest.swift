//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class CreateTopicRequest: APIModel {

    public enum Categories: String, Codable, Equatable, CaseIterable {
        case advice = "ADVICE"
        case help = "HELP"
        case info = "INFO"
        case guide = "GUIDE"
    }

    public enum Language: String, Codable, Equatable, CaseIterable {
        case ru = "RU"
        case en = "EN"
        case ch = "CH"
    }

    public enum Platform: String, Codable, Equatable, CaseIterable {
        case windows = "WINDOWS"
        case apple = "APPLE"
        case android = "ANDROID"
    }

    public var categories: [Categories]?

    public var content: String?

    public var language: Language?

    public var platform: Platform?

    public var readTime: Int?

    public var subtitle: String?

    public var title: String?

    public init(categories: [Categories]? = nil, content: String? = nil, language: Language? = nil, platform: Platform? = nil, readTime: Int? = nil, subtitle: String? = nil, title: String? = nil) {
        self.categories = categories
        self.content = content
        self.language = language
        self.platform = platform
        self.readTime = readTime
        self.subtitle = subtitle
        self.title = title
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        categories = try container.decodeArrayIfPresent("categories")
        content = try container.decodeIfPresent("content")
        language = try container.decodeIfPresent("language")
        platform = try container.decodeIfPresent("platform")
        readTime = try container.decodeIfPresent("readTime")
        subtitle = try container.decodeIfPresent("subtitle")
        title = try container.decodeIfPresent("title")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(categories, forKey: "categories")
        try container.encodeIfPresent(content, forKey: "content")
        try container.encodeIfPresent(language, forKey: "language")
        try container.encodeIfPresent(platform, forKey: "platform")
        try container.encodeIfPresent(readTime, forKey: "readTime")
        try container.encodeIfPresent(subtitle, forKey: "subtitle")
        try container.encodeIfPresent(title, forKey: "title")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? CreateTopicRequest else { return false }
      guard self.categories == object.categories else { return false }
      guard self.content == object.content else { return false }
      guard self.language == object.language else { return false }
      guard self.platform == object.platform else { return false }
      guard self.readTime == object.readTime else { return false }
      guard self.subtitle == object.subtitle else { return false }
      guard self.title == object.title else { return false }
      return true
    }

    public static func == (lhs: CreateTopicRequest, rhs: CreateTopicRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
