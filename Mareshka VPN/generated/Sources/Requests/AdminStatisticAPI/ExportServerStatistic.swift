//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension MatreshkaAPI.AdminStatisticAPI {

    /** (Админ-метод) Получение статистики пользователей */
    public enum ExportServerStatistic {

        public static let service = APIService<Response>(id: "exportServerStatistic", tag: "Admin - Statistic API", method: "GET", path: "/api/v1/admin/statistic/server/csv", hasBody: false, securityRequirements: [SecurityRequirement(type: "Bearer", scopes: [])])

        public final class Request: APIRequest<Response> {

            public struct Options {

                public var start: DateTime

                public var end: DateTime

                public var serverIds: [ID]?

                public init(start: DateTime, end: DateTime, serverIds: [ID]? = nil) {
                    self.start = start
                    self.end = end
                    self.serverIds = serverIds
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: ExportServerStatistic.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(start: DateTime, end: DateTime, serverIds: [ID]? = nil) {
                let options = Options(start: start, end: end, serverIds: serverIds)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                params["start"] = options.start.encode()
                params["end"] = options.end.encode()
                if let serverIds = options.serverIds?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["serverIds"] = serverIds
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = File

            /** OK */
            case status200(File)

            public var success: File? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(data)
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
