//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EditUserRequest: APIModel {

    public var balance: Double?

    public var email: String?

    public var personalPromocodeDiscount: Int?

    public var personalPromocodeOwnerBallEarn: Int?

    public var primaryReferral: Bool?

    public var referral: String?

    public var userId: ID?

    public init(balance: Double? = nil, email: String? = nil, personalPromocodeDiscount: Int? = nil, personalPromocodeOwnerBallEarn: Int? = nil, primaryReferral: Bool? = nil, referral: String? = nil, userId: ID? = nil) {
        self.balance = balance
        self.email = email
        self.personalPromocodeDiscount = personalPromocodeDiscount
        self.personalPromocodeOwnerBallEarn = personalPromocodeOwnerBallEarn
        self.primaryReferral = primaryReferral
        self.referral = referral
        self.userId = userId
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        balance = try container.decodeIfPresent("balance")
        email = try container.decodeIfPresent("email")
        personalPromocodeDiscount = try container.decodeIfPresent("personalPromocodeDiscount")
        personalPromocodeOwnerBallEarn = try container.decodeIfPresent("personalPromocodeOwnerBallEarn")
        primaryReferral = try container.decodeIfPresent("primaryReferral")
        referral = try container.decodeIfPresent("referral")
        userId = try container.decodeIfPresent("userId")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(balance, forKey: "balance")
        try container.encodeIfPresent(email, forKey: "email")
        try container.encodeIfPresent(personalPromocodeDiscount, forKey: "personalPromocodeDiscount")
        try container.encodeIfPresent(personalPromocodeOwnerBallEarn, forKey: "personalPromocodeOwnerBallEarn")
        try container.encodeIfPresent(primaryReferral, forKey: "primaryReferral")
        try container.encodeIfPresent(referral, forKey: "referral")
        try container.encodeIfPresent(userId, forKey: "userId")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EditUserRequest else { return false }
      guard self.balance == object.balance else { return false }
      guard self.email == object.email else { return false }
      guard self.personalPromocodeDiscount == object.personalPromocodeDiscount else { return false }
      guard self.personalPromocodeOwnerBallEarn == object.personalPromocodeOwnerBallEarn else { return false }
      guard self.primaryReferral == object.primaryReferral else { return false }
      guard self.referral == object.referral else { return false }
      guard self.userId == object.userId else { return false }
      return true
    }

    public static func == (lhs: EditUserRequest, rhs: EditUserRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
