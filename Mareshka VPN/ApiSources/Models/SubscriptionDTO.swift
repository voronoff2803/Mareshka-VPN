//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class SubscriptionDTO: APIModel {

    public var expiredAt: DateTime?

    public var id: ID?

    public var name: String?

    public var permanent: Bool?

    public var robokassa: Bool?

    public init(expiredAt: DateTime? = nil, id: ID? = nil, name: String? = nil, permanent: Bool? = nil, robokassa: Bool? = nil) {
        self.expiredAt = expiredAt
        self.id = id
        self.name = name
        self.permanent = permanent
        self.robokassa = robokassa
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        expiredAt = try container.decodeIfPresent("expiredAt")
        id = try container.decodeIfPresent("id")
        name = try container.decodeIfPresent("name")
        permanent = try container.decodeIfPresent("permanent")
        robokassa = try container.decodeIfPresent("robokassa")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(expiredAt, forKey: "expiredAt")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(permanent, forKey: "permanent")
        try container.encodeIfPresent(robokassa, forKey: "robokassa")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? SubscriptionDTO else { return false }
      guard self.expiredAt == object.expiredAt else { return false }
      guard self.id == object.id else { return false }
      guard self.name == object.name else { return false }
      guard self.permanent == object.permanent else { return false }
      guard self.robokassa == object.robokassa else { return false }
      return true
    }

    public static func == (lhs: SubscriptionDTO, rhs: SubscriptionDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
