//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class RobokassaResultRequest: APIModel {

    public var invId: String?

    public var outSum: String?

    public var shpPromo: String?

    public var shpSub: ID?

    public var shpUser: String?

    public var signatureValue: String?

    public init(invId: String? = nil, outSum: String? = nil, shpPromo: String? = nil, shpSub: ID? = nil, shpUser: String? = nil, signatureValue: String? = nil) {
        self.invId = invId
        self.outSum = outSum
        self.shpPromo = shpPromo
        self.shpSub = shpSub
        self.shpUser = shpUser
        self.signatureValue = signatureValue
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        invId = try container.decodeIfPresent("invId")
        outSum = try container.decodeIfPresent("outSum")
        shpPromo = try container.decodeIfPresent("shp_promo")
        shpSub = try container.decodeIfPresent("shp_sub")
        shpUser = try container.decodeIfPresent("shp_user")
        signatureValue = try container.decodeIfPresent("signatureValue")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(invId, forKey: "invId")
        try container.encodeIfPresent(outSum, forKey: "outSum")
        try container.encodeIfPresent(shpPromo, forKey: "shp_promo")
        try container.encodeIfPresent(shpSub, forKey: "shp_sub")
        try container.encodeIfPresent(shpUser, forKey: "shp_user")
        try container.encodeIfPresent(signatureValue, forKey: "signatureValue")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? RobokassaResultRequest else { return false }
      guard self.invId == object.invId else { return false }
      guard self.outSum == object.outSum else { return false }
      guard self.shpPromo == object.shpPromo else { return false }
      guard self.shpSub == object.shpSub else { return false }
      guard self.shpUser == object.shpUser else { return false }
      guard self.signatureValue == object.signatureValue else { return false }
      return true
    }

    public static func == (lhs: RobokassaResultRequest, rhs: RobokassaResultRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
