//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EditSystemDataRequest: APIModel {

    public enum DiscountType: String, Codable, Equatable, CaseIterable {
        case percent = "PERCENT"
        case fixed = "FIXED"
    }

    public var appleModeration: Bool?

    public var bannerRedirect: String?

    public var discount: Int?

    public var discountType: DiscountType?

    public var enablePromos: Bool?

    public var promocodeOwnerBallEarn: Int?

    public init(appleModeration: Bool? = nil, bannerRedirect: String? = nil, discount: Int? = nil, discountType: DiscountType? = nil, enablePromos: Bool? = nil, promocodeOwnerBallEarn: Int? = nil) {
        self.appleModeration = appleModeration
        self.bannerRedirect = bannerRedirect
        self.discount = discount
        self.discountType = discountType
        self.enablePromos = enablePromos
        self.promocodeOwnerBallEarn = promocodeOwnerBallEarn
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        appleModeration = try container.decodeIfPresent("appleModeration")
        bannerRedirect = try container.decodeIfPresent("bannerRedirect")
        discount = try container.decodeIfPresent("discount")
        discountType = try container.decodeIfPresent("discountType")
        enablePromos = try container.decodeIfPresent("enablePromos")
        promocodeOwnerBallEarn = try container.decodeIfPresent("promocodeOwnerBallEarn")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(appleModeration, forKey: "appleModeration")
        try container.encodeIfPresent(bannerRedirect, forKey: "bannerRedirect")
        try container.encodeIfPresent(discount, forKey: "discount")
        try container.encodeIfPresent(discountType, forKey: "discountType")
        try container.encodeIfPresent(enablePromos, forKey: "enablePromos")
        try container.encodeIfPresent(promocodeOwnerBallEarn, forKey: "promocodeOwnerBallEarn")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EditSystemDataRequest else { return false }
      guard self.appleModeration == object.appleModeration else { return false }
      guard self.bannerRedirect == object.bannerRedirect else { return false }
      guard self.discount == object.discount else { return false }
      guard self.discountType == object.discountType else { return false }
      guard self.enablePromos == object.enablePromos else { return false }
      guard self.promocodeOwnerBallEarn == object.promocodeOwnerBallEarn else { return false }
      return true
    }

    public static func == (lhs: EditSystemDataRequest, rhs: EditSystemDataRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
