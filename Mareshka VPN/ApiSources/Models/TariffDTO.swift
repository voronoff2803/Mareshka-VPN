//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class TariffDTO: APIModel {

    public enum DurationType: String, Codable, Equatable, CaseIterable {
        case days = "DAYS"
        case month = "MONTH"
        case year = "YEAR"
    }

    public enum Locale: String, Codable, Equatable, CaseIterable {
        case ru = "RU"
        case en = "EN"
        case cn = "CN"
    }

    public var ballCost: Int?

    public var bonus: Bool?

    public var chPrice: Double?

    public var discount: Int?

    public var duration: Int?

    public var durationType: DurationType?

    public var enPrice: Double?

    public var id: ID?

    public var locale: Locale?

    public var name: String?

    public var ruPrice: Double?

    public init(ballCost: Int? = nil, bonus: Bool? = nil, chPrice: Double? = nil, discount: Int? = nil, duration: Int? = nil, durationType: DurationType? = nil, enPrice: Double? = nil, id: ID? = nil, locale: Locale? = nil, name: String? = nil, ruPrice: Double? = nil) {
        self.ballCost = ballCost
        self.bonus = bonus
        self.chPrice = chPrice
        self.discount = discount
        self.duration = duration
        self.durationType = durationType
        self.enPrice = enPrice
        self.id = id
        self.locale = locale
        self.name = name
        self.ruPrice = ruPrice
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        ballCost = try container.decodeIfPresent("ballCost")
        bonus = try container.decodeIfPresent("bonus")
        chPrice = try container.decodeIfPresent("chPrice")
        discount = try container.decodeIfPresent("discount")
        duration = try container.decodeIfPresent("duration")
        durationType = try container.decodeIfPresent("durationType")
        enPrice = try container.decodeIfPresent("enPrice")
        id = try container.decodeIfPresent("id")
        locale = try container.decodeIfPresent("locale")
        name = try container.decodeIfPresent("name")
        ruPrice = try container.decodeIfPresent("ruPrice")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(ballCost, forKey: "ballCost")
        try container.encodeIfPresent(bonus, forKey: "bonus")
        try container.encodeIfPresent(chPrice, forKey: "chPrice")
        try container.encodeIfPresent(discount, forKey: "discount")
        try container.encodeIfPresent(duration, forKey: "duration")
        try container.encodeIfPresent(durationType, forKey: "durationType")
        try container.encodeIfPresent(enPrice, forKey: "enPrice")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(locale, forKey: "locale")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(ruPrice, forKey: "ruPrice")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? TariffDTO else { return false }
      guard self.ballCost == object.ballCost else { return false }
      guard self.bonus == object.bonus else { return false }
      guard self.chPrice == object.chPrice else { return false }
      guard self.discount == object.discount else { return false }
      guard self.duration == object.duration else { return false }
      guard self.durationType == object.durationType else { return false }
      guard self.enPrice == object.enPrice else { return false }
      guard self.id == object.id else { return false }
      guard self.locale == object.locale else { return false }
      guard self.name == object.name else { return false }
      guard self.ruPrice == object.ruPrice else { return false }
      return true
    }

    public static func == (lhs: TariffDTO, rhs: TariffDTO) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
